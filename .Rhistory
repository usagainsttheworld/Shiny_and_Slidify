library (swirl)
swirl()
filter(cran,r_version=="3.1.1",country=="US")
?comparison
?Comparison
cran
filter(cran,r_version=<"3.1.1",country=="IN")
filter(cran,r_version=<"3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran2,ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df()
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-gourp_by(cran)
by_package<-gourp_by(cran,package)
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
library(swirl)
swirl()
View(top_counts)
arrange(top_counts,count)
arrange(top_counts,count)
bye()
swirl()
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
arrange(top_unique,desc(unique)
)
top_unique_sorted<-arrange(top_unique,desc(unique))
View()
View(top_unique_sorted)
submit()
submit()
byez9
bye()
swirl()
View(result3)
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(carret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?e1071
?prdict.svm
?predict.svm
?svm
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
training_svm<-svm(training)
predict.svm(training_svm)
predict.svm(training_svm)
library(caret)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
training_svm<-svm(training)
predict.svm(training_svm)
?svm
set.seed(325)
modfit<-svm(CompressiveStrength~., data=training)
prediction<-predict(modfit, testing)
confusionMatrix(prediction, testing$CompressiveStrength)
confusionMatrix(prediction, testing$CompressiveStrength)
predict(modfit, testing)
prediction<-predict(modfit, testing)
confusionMatrix(prediction, testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modfit<-train(CompressiveStrength~., data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modfit<-cvm(CompressiveStrength~., data=training)
prediction<-predict(modfit, testing)
confusionMatrix(prediction, testing$CompressiveStrength)
?cvm
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modfit<-svm(CompressiveStrength~., data=training)
prediction<-predict(modfit, testing)
confusionMatrix(prediction, testing$CompressiveStrength)
dim(prediction)
class(prediction)
str(prediction)
str(testing$CompressiveStrength)
?confusitonMatrix
?confusionMatrix
class(prediction)
class(testing$CompressiveStrength)
dim(testing$CompressiveStrength)
dim(prediction)
accuracy(prediction, testing$CompressiveStrength)
library(forecast)
accuracy(prediction, testing$CompressiveStrength)
sqrt2*2-2
sqrt2
8-9
sqrt2
?sqrt
sqrt(2)
sqrt(2)*2-2
library(slidify)
setwd("~/Desktop/Coursera")
setwd("~/Desktop/Coursera/DevelopDP_ShinyApp/slidify")
author("BMI_Caculator")
list.files()
library(knitr)
browseURL('index.html')
flidify('index.Rmd')
slidify('index.Rmd')
install.packages("slidifyLibraries")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
slidify('index.Rmd')
library(knitr)
browseURL("index.Rmd")
browseURL("index.Rmd")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
library(shiny)
setwd("~/Desktop/Coursera/DevelopDP_ShinyApp")
runApp()
setwd("~/Desktop/Coursera/DevelopDP_ShinyApp/BMI_caculator")
runApp()
deployApp()
library(shinyapps)
deployApp()
setwd("~/Desktop/Coursera/DevelopDP_ShinyApp/slidify")
slidify("index.Rmd")
setwd("~/Desktop/Coursera/DevelopDP_ShinyApp/slidify/BMI_Caculator")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
